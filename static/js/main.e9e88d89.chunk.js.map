{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","initialState","status","error","setAppStatusAC","type","setAppErrorAC","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","data","resultCode","updateTaskAC","messages","length","catch","message","console","warn","AddItemForm","React","memo","props","log","disabled","useState","setTitle","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","entityStatus","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","removeTaskAC","removeTaskTC","item","addTaskAC","addTaskTC","changeStatus","newTitle","action","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","todolist","addTodolistTC","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","rootReducer","combineReducers","todoListId","copyState","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9e88d89.chunk.js","sourcesContent":["import axios from 'axios'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {setAppStatusAC} from \"../app/app-reducer\";\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'cc3df63a-f5f2-455f-9c95-f8ce5b37aa87'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n\r\n\r\n    getTodolists() {\r\n\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: null as string | null,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET_STATUS':\r\n            return {...state, status: action.status}\r\n        case \"APP/SET-ERROR\":\r\n            debugger\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\ntype ActionsType = SetAppStatusActionType | SetAppErrorActionType;\r\n\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({\r\n    type: \"APP/SET_STATUS\", status\r\n} as const);\r\n\r\nexport const setAppErrorAC = (error: string | null) => ({\r\n    type: 'APP/SET-ERROR', error\r\n} as const);\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {\r\n    RequestStatusType,\r\n    setAppErrorAC,\r\n    SetAppErrorActionType,\r\n    setAppStatusAC,\r\n    SetAppStatusActionType\r\n} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\":\r\n            debugger\r\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\r\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE',\r\n    id,\r\n    title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER',\r\n    id,\r\n    filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\r\n\r\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => (\r\n    {type: \"CHANGE_TODOLIST_ENTITY_STATUS\", id, entityStatus} as const);\r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC(res.data))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((res: AxiosError) => {\r\n                dispatch(setAppErrorAC(res.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\r\ndebugger\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC(todolistId))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            })\r\n            .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC(res.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC(res.data.data.item))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]));\r\n                    } else dispatch(setAppErrorAC(\"UNKNOWN ERROR\"))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n            .catch((res: AxiosError) => {\r\n                dispatch(setAppErrorAC(res.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(id, title))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    debugger\r\n                } else {\r\n                    if (res.data.messages.length) {\r\n                        dispatch(setAppErrorAC(res.data.messages[0]));\r\n                    } else dispatch(setAppErrorAC(\"UNKNOWN ERROR\"))\r\n                }\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n            .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC(res.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\nexport type ChangeTodolistEntityStatusActionType = ReturnType<typeof changeTodolistEntityStatusAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    //добавили типизацию для диспатча\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ChangeTodolistEntityStatusActionType\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\n","import {AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType} from './todolists-reducer'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'UPDATE-TASK':\r\n            debugger\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n\r\n            }\r\n\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        case 'SET-TODOLISTS': {\r\n            const copyState = {...state}\r\n            action.todolists.forEach(tl => {\r\n                copyState[tl.id] = []\r\n            })\r\n            return copyState\r\n        }\r\n        case 'SET-TASKS':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const removeTaskAC = (taskId: string, todolistId: string) =>\r\n    ({type: 'REMOVE-TASK', taskId, todolistId} as const)\r\nexport const addTaskAC = (task: TaskType) =>\r\n    ({type: 'ADD-TASK', task} as const)\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) =>\r\n    ({type: 'UPDATE-TASK', model, todolistId, taskId} as const)\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) =>\r\n    ({type: 'SET-TASKS', tasks, todolistId} as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then((res) => {\r\n            const tasks = res.data.items\r\n            dispatch(setTasksAC(tasks, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC(res.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(res => {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        })\r\n        .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC(res.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n}\r\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, title)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                const task = res.data.data.item\r\n                dispatch(addTaskAC(task))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                if (res.data.messages.length) {\r\n                    dispatch(setAppErrorAC(res.data.messages[0]));\r\n\r\n                } else dispatch(setAppErrorAC(\"UNKNOWN ERROR\"))\r\n            }\r\n            dispatch(setAppStatusAC('failed'))\r\n        })\r\n        .catch((res: AxiosError) => {\r\n            dispatch(setAppErrorAC(res.message))\r\n            dispatch(setAppStatusAC('failed'))\r\n\r\n        })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (!task) {\r\n            //throw new Error(\"task not found in the state\");\r\n            console.warn('task not found in the state')\r\n            return\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...domainModel\r\n        }\r\n\r\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n            .then(res => {\r\n                    if (res.data.resultCode === 0) {\r\n                        dispatch(updateTaskAC(taskId, domainModel, todolistId))\r\n                        dispatch(setAppStatusAC('succeeded'))\r\n                        debugger\r\n                    } else {\r\n                        if (res.data.messages.length) {\r\n                            dispatch(setAppErrorAC(res.data.messages[0]));\r\n                            debugger\r\n\r\n                        } else dispatch(setAppErrorAC(\"UNKNOWN ERROR\"))\r\n                    }\r\n                    dispatch(setAppStatusAC('failed'))\r\n                }\r\n            )\r\n            .catch((res: AxiosError) => {\r\n                dispatch(setAppErrorAC(res.message))\r\n                dispatch(setAppStatusAC('failed'))\r\n            })\r\n    }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof setTasksAC>\r\n    //добавили типизацию для диспатча\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../app/app-reducer\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void,\r\n    disabled?:RequestStatusType,\r\n}\r\n\r\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n    console.log(props.disabled)\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n                   disabled={props.disabled==='loading'}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem} disabled={props.disabled==='loading'}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react'\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan'\r\nimport { TaskStatuses, TaskType } from '../../../../api/todolists-api'\r\n\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchTasksTC } from '../tasks-reducer'\r\n\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport {RequestStatusType} from \"../../../app/app-reducer\";\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n    entityStatus:RequestStatusType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        const thunk = fetchTasksTC(props.id)\r\n        dispatch(thunk)\r\n    }, [dispatch,props.id])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle} />\r\n            <IconButton onClick={removeTodolist} disabled={props.entityStatus==='loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.entityStatus}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { AppRootStateType } from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport { addTaskTC, removeTaskTC, TasksStateType, updateTaskTC } from './tasks-reducer'\r\nimport { TaskStatuses } from '../../api/todolists-api'\r\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\r\nimport { Todolist } from './Todolist/Todolist'\r\n\r\nimport Grid from '@mui/material/Grid';\r\nimport Paper from '@mui/material/Paper';\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC(id, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(title, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                id={tl.id}\r\n                                title={tl.title}\r\n                                filter={tl.filter}\r\n                                entityStatus={tl.entityStatus}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React, {useState} from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const dispatch=useDispatch();\r\n\r\n    const error=useSelector<AppRootStateType,string|null>(state=>state.app.error)\r\n\r\n    /*const [open, setOpen] = useState(true);*/\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error!==null} autoHideDuration={3000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\n// You can learn about the difference by reading this guide on minimizing bundle size.\r\n// https://mui.com/guides/minimizing-bundle-size/\r\n// import { AppBar, Button, Container, IconButton, Toolbar, Typography } from '@mui/material';\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport {Menu} from '@mui/icons-material';\r\nimport LinearProgress from \"@mui/material/LinearProgress\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackbar/ErrorSnackbar\";\r\n\r\n\r\nfunction App() {\r\n\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n\r\n\r\n            </AppBar>\r\n            {status === 'loading' && <LinearProgress color=\"secondary\"/>}\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n            <ErrorSnackbar/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app:appReducer,\r\n})\r\n// непосредственно создаём store\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n// определить автоматически тип всего объекта состояния\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}